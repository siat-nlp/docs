{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"NLP and Deep Learning Tricks \u00b6 This repository aims to keep track of some practical and theoretical tricks in natural language processing (NLP) / deep learning / machine learning, etc. Most of these tricks are summarized by members of our group, while some others are borrowed from open-source sites. Data prepossessing \u00b6 Network architecture \u00b6 Seq2Seq \u00b6 Some tricks to train RNN and seq2seq models: Embedding size: 1024 or 512. Lower dimensionality like 256 can also lead to good performances. Higher does not necessarily lead to better performances. For the decoder: LSTM > GRU > Vanilla-RNN 2-4 layers seems generally enough. Deeper models with residual connections seems more difficult to converge (high variance). More tricks needs to be discovered. ResD (dense residual connections) > Res (only connected to previous layer) > no residual connections For encoder: Bidirectional > Unidirectional (reversed input) > Unidirectional Attention (additive) > Attention (multiplicative) > No attention. Authors suggest that attention act more as a skip connection mechanism than as a memory for the decoder. Ref Massive Exploration of Neural Machine Translation Architectures , Denny Britz, Anna Goldie et al. For seq2seq, reverse the order of the input sequence (['I', 'am', 'hungry'] becomes ['hungry', 'am', 'I']). Keep the target sequence intact. Why From the authors: \" This way, [...] that makes it easy for SGD to \u201cestablish communication\u201d between the input and the output. We found this simple data transformation to greatly improve the performance of the LSTM. \" Ref Sequence to Sequence Learning with Neural Networks , Ilya Sutskever et al. Char-RNN \u00b6 By training in an unsupervised way a network to predict the next character of a text (char-RNN), the network will learn a representation which can then be used for a supervised task (here sentiment analysis). Ref Learning to Generate Reviews and Discovering Sentiment , Ilya Sutskever et al. Parameters \u00b6 Learning rate \u00b6 The learning rate can be usually initialized as 0.0001, 0.0003, 0.001, 0.003, 0.01, 0.03, 0.1(3x growing up). A strategy used to select the hyperparameters is to randomly sample them (uniformly or logscale) and see the testing error after a few epoch. Beam size \u00b6 Usually set from 2 to 10. The larger beam size, the higher computational cost. Regularization \u00b6 Dropout \u00b6 To make Dropout works with RNN, it should only be applied on non-recurrent connections (between layers among a same timestep) [1]. Some more recent paper propose some tricks to make dropout works for recurrent connections[2]. Ref [1]. Recurrent Neural Network Regularization , Wojciech Zaremba et al. [2]. Recurrent Dropout without Memory Loss , Stanislau Semeniuta et al. Batch normalization \u00b6 adding a new normalization layer. Some additional tricks for accelerating BN Networks: * Increase the learning rate * Remove/reduce Dropout: speeds up training, without increasing overfitting * Remove/Reduce the L2 weight regularization * Accelerate the learning rate decay: because the network trains faster * Remove Local Response Normalization * Shuffle training examples more thoroughly: prevents the same examples from always appearing in a mini-batch together. (The authors speak about 1% improvements in the validation) * Reduce the photometric distortions Why Some good explanation at Quora . Reinforcement learning \u00b6 Asynchronous \u00b6 Train simultaneously multiple agents with different exploration policies (e.g., E-greedy with different values of epsilon) improve the robustness. Ref Asynchronous Methods for Deep Reinforcement Learning , V. Mnih. Skip frame \u00b6 Compute the action every 4 frames instead of every frames. For the other frames, repeat the action. Why Works well on Atari games, when the player reactivity doesn't need to be frame perfect. Using this trick allows to greatly speed up the training (About x4). Ref Playing Atari with Deep Reinforcement Learning , V. Mnih. History \u00b6 Instead of only taking the current frame as input, stack the last frames together on a single input (size (h, w, c) with 1 grayscale frame by channel). Combined with a skip frame (repeat action) of 4, that means we would stack the frames t, t-4, t-8 and t-12. Why This allows the network to have some momentum information. Ref Deep Reinforcement Learning with Double Q-learning , V. Mnih. Experience Replay \u00b6 Instead of updating every frames as the agent plays, to avoid correlations between the frames, it's better to sample a batch in the history of the transition taken (state, actionTaken, reward, nextState). This is basically the same idea as shuffling the dataset before training for supervised tasks. Some strategies exist to sample batches which contain more information (in the sense predicted reward different from real reward). Ref Prioritized Experience Replay , Tom Schaul et al. PAAC (Parallel Advantage Actor Critic) \u00b6 It's possible to simplify the the A3C algorithm by batching the agent experiences and using a single model with synchronous updates. Ref Efficient Parallel Methods for Deep Reinforcement Learning , Alfredo V. Clemente et al.","title":"NLP and DL Tricks"},{"location":"#nlp-and-deep-learning-tricks","text":"This repository aims to keep track of some practical and theoretical tricks in natural language processing (NLP) / deep learning / machine learning, etc. Most of these tricks are summarized by members of our group, while some others are borrowed from open-source sites.","title":"NLP and Deep Learning Tricks"},{"location":"#data-prepossessing","text":"","title":"Data prepossessing"},{"location":"#network-architecture","text":"","title":"Network architecture"},{"location":"#seq2seq","text":"Some tricks to train RNN and seq2seq models: Embedding size: 1024 or 512. Lower dimensionality like 256 can also lead to good performances. Higher does not necessarily lead to better performances. For the decoder: LSTM > GRU > Vanilla-RNN 2-4 layers seems generally enough. Deeper models with residual connections seems more difficult to converge (high variance). More tricks needs to be discovered. ResD (dense residual connections) > Res (only connected to previous layer) > no residual connections For encoder: Bidirectional > Unidirectional (reversed input) > Unidirectional Attention (additive) > Attention (multiplicative) > No attention. Authors suggest that attention act more as a skip connection mechanism than as a memory for the decoder. Ref Massive Exploration of Neural Machine Translation Architectures , Denny Britz, Anna Goldie et al. For seq2seq, reverse the order of the input sequence (['I', 'am', 'hungry'] becomes ['hungry', 'am', 'I']). Keep the target sequence intact. Why From the authors: \" This way, [...] that makes it easy for SGD to \u201cestablish communication\u201d between the input and the output. We found this simple data transformation to greatly improve the performance of the LSTM. \" Ref Sequence to Sequence Learning with Neural Networks , Ilya Sutskever et al.","title":"Seq2Seq"},{"location":"#char-rnn","text":"By training in an unsupervised way a network to predict the next character of a text (char-RNN), the network will learn a representation which can then be used for a supervised task (here sentiment analysis). Ref Learning to Generate Reviews and Discovering Sentiment , Ilya Sutskever et al.","title":"Char-RNN"},{"location":"#parameters","text":"","title":"Parameters"},{"location":"#learning-rate","text":"The learning rate can be usually initialized as 0.0001, 0.0003, 0.001, 0.003, 0.01, 0.03, 0.1(3x growing up). A strategy used to select the hyperparameters is to randomly sample them (uniformly or logscale) and see the testing error after a few epoch.","title":"Learning rate"},{"location":"#beam-size","text":"Usually set from 2 to 10. The larger beam size, the higher computational cost.","title":"Beam size"},{"location":"#regularization","text":"","title":"Regularization"},{"location":"#dropout","text":"To make Dropout works with RNN, it should only be applied on non-recurrent connections (between layers among a same timestep) [1]. Some more recent paper propose some tricks to make dropout works for recurrent connections[2]. Ref [1]. Recurrent Neural Network Regularization , Wojciech Zaremba et al. [2]. Recurrent Dropout without Memory Loss , Stanislau Semeniuta et al.","title":"Dropout"},{"location":"#batch-normalization","text":"adding a new normalization layer. Some additional tricks for accelerating BN Networks: * Increase the learning rate * Remove/reduce Dropout: speeds up training, without increasing overfitting * Remove/Reduce the L2 weight regularization * Accelerate the learning rate decay: because the network trains faster * Remove Local Response Normalization * Shuffle training examples more thoroughly: prevents the same examples from always appearing in a mini-batch together. (The authors speak about 1% improvements in the validation) * Reduce the photometric distortions Why Some good explanation at Quora .","title":"Batch normalization"},{"location":"#reinforcement-learning","text":"","title":"Reinforcement learning"},{"location":"#asynchronous","text":"Train simultaneously multiple agents with different exploration policies (e.g., E-greedy with different values of epsilon) improve the robustness. Ref Asynchronous Methods for Deep Reinforcement Learning , V. Mnih.","title":"Asynchronous"},{"location":"#skip-frame","text":"Compute the action every 4 frames instead of every frames. For the other frames, repeat the action. Why Works well on Atari games, when the player reactivity doesn't need to be frame perfect. Using this trick allows to greatly speed up the training (About x4). Ref Playing Atari with Deep Reinforcement Learning , V. Mnih.","title":"Skip frame"},{"location":"#history","text":"Instead of only taking the current frame as input, stack the last frames together on a single input (size (h, w, c) with 1 grayscale frame by channel). Combined with a skip frame (repeat action) of 4, that means we would stack the frames t, t-4, t-8 and t-12. Why This allows the network to have some momentum information. Ref Deep Reinforcement Learning with Double Q-learning , V. Mnih.","title":"History"},{"location":"#experience-replay","text":"Instead of updating every frames as the agent plays, to avoid correlations between the frames, it's better to sample a batch in the history of the transition taken (state, actionTaken, reward, nextState). This is basically the same idea as shuffling the dataset before training for supervised tasks. Some strategies exist to sample batches which contain more information (in the sense predicted reward different from real reward). Ref Prioritized Experience Replay , Tom Schaul et al.","title":"Experience Replay"},{"location":"#paac-parallel-advantage-actor-critic","text":"It's possible to simplify the the A3C algorithm by batching the agent experiences and using a single model with synchronous updates. Ref Efficient Parallel Methods for Deep Reinforcement Learning , Alfredo V. Clemente et al.","title":"PAAC (Parallel Advantage Actor Critic)"},{"location":"dlFramework/","text":"Deep Learning Framework Programming \u00b6 Programming in Tensorflow \u00b6 tf.variable_scope/tf.name_scope \u00b6 Both scopes have the same effect on all operations as well as variables, but name scope is ignored by tf . get_variable . Suggest use tf . variable_scope in most cases. Ref The difference between name scope and variable scope in tensorflow at stackoverflow . Model Save/Restore \u00b6 Usually, we create a helper saver = tf.train.Saver() to save and restore the whole model. However, if we want to use pre-trained model for fine-tuning or transfer learning, there are 2 ways: (1) Create the network by writing code to create each and every layer manually as the original model, and then use tf.train.Saver() to restore pre-trained model's checkpoint file. (2) Use .meta file and create the helper as saver = tf.train.import_meta_graph('xxx_model-xxx.meta') and then restore the pre-trained model. Ref More details are in this tutorial . Programming in PyTorch \u00b6 CUDA out of memory \u00b6 When RuntimeError: CUDA out of memory occurs, usually (1) check if exists too large tensors in computation graph; (2) downsize the batch size; (3) or use multiple GPUs to train. Note to split batch size when using nn.DataParallel . Ref Some other details are in this debug log .","title":"DL Framework Programming"},{"location":"dlFramework/#deep-learning-framework-programming","text":"","title":"Deep Learning Framework Programming"},{"location":"dlFramework/#programming-in-tensorflow","text":"","title":"Programming in Tensorflow"},{"location":"dlFramework/#tfvariable_scopetfname_scope","text":"Both scopes have the same effect on all operations as well as variables, but name scope is ignored by tf . get_variable . Suggest use tf . variable_scope in most cases. Ref The difference between name scope and variable scope in tensorflow at stackoverflow .","title":"tf.variable_scope/tf.name_scope"},{"location":"dlFramework/#model-saverestore","text":"Usually, we create a helper saver = tf.train.Saver() to save and restore the whole model. However, if we want to use pre-trained model for fine-tuning or transfer learning, there are 2 ways: (1) Create the network by writing code to create each and every layer manually as the original model, and then use tf.train.Saver() to restore pre-trained model's checkpoint file. (2) Use .meta file and create the helper as saver = tf.train.import_meta_graph('xxx_model-xxx.meta') and then restore the pre-trained model. Ref More details are in this tutorial .","title":"Model Save/Restore"},{"location":"dlFramework/#programming-in-pytorch","text":"","title":"Programming in PyTorch"},{"location":"dlFramework/#cuda-out-of-memory","text":"When RuntimeError: CUDA out of memory occurs, usually (1) check if exists too large tensors in computation graph; (2) downsize the batch size; (3) or use multiple GPUs to train. Note to split batch size when using nn.DataParallel . Ref Some other details are in this debug log .","title":"CUDA out of memory"},{"location":"tutorial/","text":"Useful Tutorials \u00b6 under construction...","title":"Useful Tutorials"},{"location":"tutorial/#useful-tutorials","text":"under construction...","title":"Useful Tutorials"},{"location":"helper/","text":"\u5982\u4f55\u5206\u4eab\u4f60\u7684\u60f3\u6cd5\uff1f \u00b6 \u4f17\u4eba\u62fe\u67f4\u706b\u7130\u9ad8\uff0c\u4e3a\u4e86\u8ba9\u672c\u9879\u76ee\u7684\u5185\u5bb9\u80fd\u591f\u5e2e\u52a9\u5230\u66f4\u591a\u6709\u9700\u8981\u7684NLP\u7814\u7a76\u8005\u4e0e\u5f00\u53d1\u8005\uff0c\u6211\u4eec\u975e\u5e38\u6b22\u8fce\u6bcf\u4e00\u4e2a\u4eba\u90fd\u79ef\u6781\u5730\u8d21\u732e\u81ea\u5df1\u7684\u77e5\u8bc6\u4e0e\u529b\u91cf\uff0c\u8ba9\u8fd9\u4e2a\u9879\u76ee\u53d8\u5f97\u8d8a\u6765\u8d8a\u597d\u3002\u672c\u9879\u76ee\u63d0\u4f9b\u4e86\u7b80\u5355\u65b9\u4fbf\u7684\u77e5\u8bc6\u8d21\u732e\u65b9\u5f0f\uff0c\u4f60\u53ef\u4ee5\u6839\u636e\u4ee5\u4e0b\u4ecb\u7ecd\u7684\u5185\u5bb9\u4e0e\u6b65\u9aa4\u6765\u5206\u4eab\u4f60\u7684\u77e5\u8bc6 \uff01 \u5728\u5df2\u6709\u9875\u9762\u4e0a\u589e\u52a0\u6216\u4fee\u6539\u6587\u6863 \u00b6 \u9884\u5907\u6761\u4ef6 \u00b6 \u4e00\u4e2aGitHub\u8d26\u53f7\uff08\u82e5\u65e0\u53ef\u4ee5\u8bbf\u95ee GitHub \u8fdb\u884c\u8d26\u53f7\u7684\u6ce8\u518c\uff09 \u4e00\u4e2a\u53ef\u4ee5\u8fde\u63a5\u4e92\u8054\u7f51\u7684\u6d4f\u89c8\u5668 \u64cd\u4f5c\u6d41\u7a0b \u00b6 \u8bbf\u95ee\u7f51\u7ad9\u4e4b\u540e\uff0c\u8fdb\u5165\u5230\u60a8\u60f3\u8981\u8fdb\u884c\u66f4\u6539\u7684\u9875\u9762\uff0c\u53ef\u4ee5\u770b\u5230\u9875\u9762\u7684\u53f3\u4e0a\u65b9\u6709\u4e00\u4e2a\u94c5\u7b14\u5f62\u72b6\u7684\u6309\u94ae\uff08\u6bd4\u5982\u6211\u60f3\u66f4\u6539About\u9875\u9762\u4e0b\u7684Writing Tutorial\uff0c\u8fdb\u5165\u5230\u8be5\u9875\u9762\u540e\u53ef\u4ee5\u770b\u5230\u9875\u9762\u4e0a\u7684\u94c5\u7b14\u6309\u94ae\uff0c \u5982\u4e0b\u56fe\u7ea2\u8272\u65b9\u6846\u7684\u4f4d\u7f6e \uff09\u3002 \u70b9\u51fb\u8fd9\u4e2a\u94c5\u7b14\u6309\u94ae\uff0c\u53ef\u4ee5\u770b\u5230\u6211\u4eec\u8df3\u8f6c\u5230\u4e86\u8fd9\u4e2a\u9875\u9762\u7684md\u6587\u4ef6\uff08\u89c1\u4e0b\u56fe\uff09\u3002\u672c\u7f51\u7ad9\u4f7f\u7528\u4e86mkdocs\u8fdb\u884c\u6587\u6863\u7684\u751f\u6210\uff0c \u56e0\u6b64\u6211\u4eec\u53ea\u9700\u7f16\u8f91\u5bf9\u5e94\u9875\u9762\u7684md\u6587\u4ef6\u5373\u53ef\u4fee\u6539\u5bf9\u5e94\u6587\u6863\u4e2d\u7684\u5185\u5bb9 \u3002 \u6211\u4eec\u70b9\u51fb\u4e0a\u56fe\u4e2d\u7ea2\u6846\u4f4d\u7f6e\u5904\u7684\u94c5\u7b14\u6309\u94ae\uff0c\u82e5\u63d0\u793a\u4f60\u6ca1\u6709\u767b\u5f55\u65e0\u6cd5\u70b9\u51fb\u5219\u9700\u8981\u4f7f\u7528GitHub\u8d26\u53f7\u8fdb\u884c\u767b\u5f55\uff0c\u767b\u5f55\u540e\u5373\u53ef\u70b9\u51fb\u8be5\u94c5\u7b14\u72b6\u6309\u94ae\u3002\u6b64\u65f6\u5c06\u8fdb\u5165\u5230md\u6587\u4ef6\u4fee\u6539\u7684\u9875\u9762\uff08\u89c1\u4e0b\u56fe\uff09\u3002 \u8fdb\u884c\u6587\u4ef6\u7f16\u5199\u65f6\u4f60\u5fc5\u987b\u4f7f\u7528md\u6587\u4ef6\u652f\u6301\u7684markdown\u8bed\u6cd5 \uff0c\u6709\u5173markdown\u7684\u57fa\u672c\u8bed\u6cd5\u53ef\u4ee5\u53c2\u8003\u524d\u6587\u4e2d\u7684\u5df2\u7ecf\u5b58\u5728\u7684\u4ee3\u7801\uff0c\u76f8\u4fe1\u806a\u660e\u7684\u4f60\u601d\u8003\u7247\u523b\u5c31\u53ef\u4ee5\u8fdb\u884c\u6a21\u4eff\u7f16\u5199\u4e86\ud83e\udd23\uff0c\u5982\u679c\u4f60\u9700\u8981\u4e00\u4e9b\u53c2\u8003\u8d44\u6599\u53ef\u4ee5\u67e5\u770b Markdown \u8bed\u6cd5\u8bf4\u660e \u3002 \u6211\u4eec\u505a\u4e00\u4e9b\u7b80\u5355\u7684\u66f4\u6539\uff0c\u5728\u6587\u4ef6\u672b\u5c3e\u6dfb\u52a0\u4ee5\u4e0b\u4e00\u6bb5\u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 !!! bug Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. https://squidfunk.github.io/mkdocs-material/extensions/codehilite/#installation https://squidfunk.github.io/mkdocs-material/extensions/admonition/ \u5b83\u7684\u6548\u679c\u5982\u4e0b\uff1a Bug Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. https://squidfunk.github.io/mkdocs-material/extensions/codehilite/#installation https://squidfunk.github.io/mkdocs-material/extensions/admonition/ \u53ef\u4ee5\u770b\u5230\uff0c\u4f7f\u7528markdown\u8bed\u8a00\u53ef\u4ee5\u8f7b\u677e\u5730\u7f16\u5199\u51fa\u7f8e\u89c2\u7684\u6587\u6863\uff0c\u70b9\u51fb\u9875\u9762\u7684 Preview Changes \u53ef\u4ee5\u76f4\u63a5\u770b\u5230\u4fee\u6539\u7684\u7ed3\u679c\uff0c\u65b9\u4fbf\u6211\u4eec\u67e5\u770b\u662f\u5426\u5b58\u5728\u8bed\u6cd5\u9519\u8bef\u3002\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c \u672c\u6587\u6863\u8fd8\u652f\u6301markdown\u62d3\u5c55\u529f\u80fd\uff0c\u53ef\u4ee5\u4f7f\u7528\u8bf8\u5982\uff1a\u6570\u5b66\u516c\u5f0f\u3001\u8bed\u6cd5\u9ad8\u4eae\uff0c\u9ad8\u4eae\u6807\u6ce8\u7b49\u7b49\u539f\u751fmarkdown\u4e0d\u652f\u6301\u7684\u529f\u80fd \uff0c\u6709\u5173\u8fd9\u4e00\u90e8\u5206\u7684\u8be6\u7ec6\u5185\u5bb9\u8bf7\u53c2\u8003 Element \u3002 \u5f53\u6211\u4eec\u4fee\u6539\u5b8c\u6210\u540e\uff0c\u9700\u8981\u8fdb\u884c\u63d0\u4ea4\u4fee\u6539\u3002\u6eda\u52a8\u9875\u9762\u81f3\u5e95\u90e8\uff0c\u53ef\u4ee5\u770b\u5230 Propose file change \uff0c\u6839\u636e\u4f60\u7684\u4fee\u6539\u5185\u5bb9\u586b\u5199\u5bf9\u5e94\u7684\u63cf\u8ff0\uff0c\u5982\u4e0b\u56fe\u6240\u793a\u3002 \u968f\u540e\u70b9\u51fb\u63d0\u4ea4 Propose file change \uff0c\u6211\u4eec\u5c06\u4f1a\u8fdb\u5165\u5230\u6700\u7ec8\u7684\u63d0\u4ea4\u9875\u9762\u3002 \u5728\u9875\u9762\u4e0b\u65b9\u67e5\u770b\u6211\u4eec\u7684\u4fee\u6539\u65e0\u8bef\u540e\uff0c\u70b9\u51fb Create pull request \uff0c\u5c06\u4f1a\u628a\u6211\u4eec\u7684\u4fee\u6539\u5185\u5bb9\u6c47\u62a5\u81f3\u6587\u6863\u7f16\u8f91\u6240\u5728\u7684\u4ed3\u5e93\u4e2d\u3002\u7f16\u8f91\u90e8\u4f1a\u8fdb\u884c\u5185\u5bb9\u7684\u5ba1\u6838\uff0c\u4e00\u65e6\u5ba1\u6838\u901a\u8fc7\u4f60\u5f88\u5feb\u5c31\u4f1a\u5728\u7f51\u9875\u4e0a\u770b\u5230\u4f60\u7684\u8d21\u732e\u4e86\uff01\u4e3a\u4e86\u8ba9\u6211\u4eec\u7f16\u5199\u7684\u6587\u6863\u66f4\u52a0\u7edf\u4e00\uff0c \u6211\u4eec\u8fd8\u8bbe\u5b9a\u4e86\u4e00\u4e9b\u6587\u6863\u7684\u7f16\u5199\u8303\u5f0f\uff0c\u5e2e\u52a9\u6211\u4eec\u5199\u51fa\u66f4\u52a0\u7edf\u4e00\u7684\u6587\u6863\uff0c\u53ef\u4ee5\u8fdb\u5165 Writing Paradigm \u8fdb\u884c\u67e5\u770b \u3002 \u9879\u76ee\u662f\u5982\u4f55\u8fd0\u4f5c\u7684\uff1f \u00b6 \u76ee\u524d\u5185\u5bb9\u4ed3\u5e93\u5b89\u6392\u5728 NLP-DL-Tricks \u4e2d\uff0c\u5f53\u5176\u4ed6\u7528\u6237\u53d1\u8d77pull request\u65f6\uff0c\u5c06\u4f1a\u6709\u4ed3\u5e93\u62e5\u6709\u8005\u8fdb\u884c\u6574\u5408\u5230edit\u5206\u652f\u3002\u5f85\u51c6\u5907\u8fdb\u884c\u66f4\u65b0\u540e\uff0c\u4ed3\u5e93\u5f00\u53d1\u8005\u4f1a\u5bf9 edit\u4e0a\u7684\u4ee3\u7801\u6574\u5408\u5230master\u5206\u652f\u4e2d\uff0c\u518d\u8fdb\u884c\u7f51\u9875\u7684\u751f\u6210\u4e0e\u66f4\u65b0\u3002 \u6574\u4e2a\u6d41\u7a0b\u7684\u793a\u610f\u56fe\u5982\u4e0b\uff1a","title":"Writing Tutorial"},{"location":"helper/#_1","text":"\u4f17\u4eba\u62fe\u67f4\u706b\u7130\u9ad8\uff0c\u4e3a\u4e86\u8ba9\u672c\u9879\u76ee\u7684\u5185\u5bb9\u80fd\u591f\u5e2e\u52a9\u5230\u66f4\u591a\u6709\u9700\u8981\u7684NLP\u7814\u7a76\u8005\u4e0e\u5f00\u53d1\u8005\uff0c\u6211\u4eec\u975e\u5e38\u6b22\u8fce\u6bcf\u4e00\u4e2a\u4eba\u90fd\u79ef\u6781\u5730\u8d21\u732e\u81ea\u5df1\u7684\u77e5\u8bc6\u4e0e\u529b\u91cf\uff0c\u8ba9\u8fd9\u4e2a\u9879\u76ee\u53d8\u5f97\u8d8a\u6765\u8d8a\u597d\u3002\u672c\u9879\u76ee\u63d0\u4f9b\u4e86\u7b80\u5355\u65b9\u4fbf\u7684\u77e5\u8bc6\u8d21\u732e\u65b9\u5f0f\uff0c\u4f60\u53ef\u4ee5\u6839\u636e\u4ee5\u4e0b\u4ecb\u7ecd\u7684\u5185\u5bb9\u4e0e\u6b65\u9aa4\u6765\u5206\u4eab\u4f60\u7684\u77e5\u8bc6 \uff01","title":"\u5982\u4f55\u5206\u4eab\u4f60\u7684\u60f3\u6cd5\uff1f"},{"location":"helper/#_2","text":"","title":"\u5728\u5df2\u6709\u9875\u9762\u4e0a\u589e\u52a0\u6216\u4fee\u6539\u6587\u6863"},{"location":"helper/#_3","text":"\u4e00\u4e2aGitHub\u8d26\u53f7\uff08\u82e5\u65e0\u53ef\u4ee5\u8bbf\u95ee GitHub \u8fdb\u884c\u8d26\u53f7\u7684\u6ce8\u518c\uff09 \u4e00\u4e2a\u53ef\u4ee5\u8fde\u63a5\u4e92\u8054\u7f51\u7684\u6d4f\u89c8\u5668","title":"\u9884\u5907\u6761\u4ef6"},{"location":"helper/#_4","text":"\u8bbf\u95ee\u7f51\u7ad9\u4e4b\u540e\uff0c\u8fdb\u5165\u5230\u60a8\u60f3\u8981\u8fdb\u884c\u66f4\u6539\u7684\u9875\u9762\uff0c\u53ef\u4ee5\u770b\u5230\u9875\u9762\u7684\u53f3\u4e0a\u65b9\u6709\u4e00\u4e2a\u94c5\u7b14\u5f62\u72b6\u7684\u6309\u94ae\uff08\u6bd4\u5982\u6211\u60f3\u66f4\u6539About\u9875\u9762\u4e0b\u7684Writing Tutorial\uff0c\u8fdb\u5165\u5230\u8be5\u9875\u9762\u540e\u53ef\u4ee5\u770b\u5230\u9875\u9762\u4e0a\u7684\u94c5\u7b14\u6309\u94ae\uff0c \u5982\u4e0b\u56fe\u7ea2\u8272\u65b9\u6846\u7684\u4f4d\u7f6e \uff09\u3002 \u70b9\u51fb\u8fd9\u4e2a\u94c5\u7b14\u6309\u94ae\uff0c\u53ef\u4ee5\u770b\u5230\u6211\u4eec\u8df3\u8f6c\u5230\u4e86\u8fd9\u4e2a\u9875\u9762\u7684md\u6587\u4ef6\uff08\u89c1\u4e0b\u56fe\uff09\u3002\u672c\u7f51\u7ad9\u4f7f\u7528\u4e86mkdocs\u8fdb\u884c\u6587\u6863\u7684\u751f\u6210\uff0c \u56e0\u6b64\u6211\u4eec\u53ea\u9700\u7f16\u8f91\u5bf9\u5e94\u9875\u9762\u7684md\u6587\u4ef6\u5373\u53ef\u4fee\u6539\u5bf9\u5e94\u6587\u6863\u4e2d\u7684\u5185\u5bb9 \u3002 \u6211\u4eec\u70b9\u51fb\u4e0a\u56fe\u4e2d\u7ea2\u6846\u4f4d\u7f6e\u5904\u7684\u94c5\u7b14\u6309\u94ae\uff0c\u82e5\u63d0\u793a\u4f60\u6ca1\u6709\u767b\u5f55\u65e0\u6cd5\u70b9\u51fb\u5219\u9700\u8981\u4f7f\u7528GitHub\u8d26\u53f7\u8fdb\u884c\u767b\u5f55\uff0c\u767b\u5f55\u540e\u5373\u53ef\u70b9\u51fb\u8be5\u94c5\u7b14\u72b6\u6309\u94ae\u3002\u6b64\u65f6\u5c06\u8fdb\u5165\u5230md\u6587\u4ef6\u4fee\u6539\u7684\u9875\u9762\uff08\u89c1\u4e0b\u56fe\uff09\u3002 \u8fdb\u884c\u6587\u4ef6\u7f16\u5199\u65f6\u4f60\u5fc5\u987b\u4f7f\u7528md\u6587\u4ef6\u652f\u6301\u7684markdown\u8bed\u6cd5 \uff0c\u6709\u5173markdown\u7684\u57fa\u672c\u8bed\u6cd5\u53ef\u4ee5\u53c2\u8003\u524d\u6587\u4e2d\u7684\u5df2\u7ecf\u5b58\u5728\u7684\u4ee3\u7801\uff0c\u76f8\u4fe1\u806a\u660e\u7684\u4f60\u601d\u8003\u7247\u523b\u5c31\u53ef\u4ee5\u8fdb\u884c\u6a21\u4eff\u7f16\u5199\u4e86\ud83e\udd23\uff0c\u5982\u679c\u4f60\u9700\u8981\u4e00\u4e9b\u53c2\u8003\u8d44\u6599\u53ef\u4ee5\u67e5\u770b Markdown \u8bed\u6cd5\u8bf4\u660e \u3002 \u6211\u4eec\u505a\u4e00\u4e9b\u7b80\u5355\u7684\u66f4\u6539\uff0c\u5728\u6587\u4ef6\u672b\u5c3e\u6dfb\u52a0\u4ee5\u4e0b\u4e00\u6bb5\u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 !!! bug Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. https://squidfunk.github.io/mkdocs-material/extensions/codehilite/#installation https://squidfunk.github.io/mkdocs-material/extensions/admonition/ \u5b83\u7684\u6548\u679c\u5982\u4e0b\uff1a Bug Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. https://squidfunk.github.io/mkdocs-material/extensions/codehilite/#installation https://squidfunk.github.io/mkdocs-material/extensions/admonition/ \u53ef\u4ee5\u770b\u5230\uff0c\u4f7f\u7528markdown\u8bed\u8a00\u53ef\u4ee5\u8f7b\u677e\u5730\u7f16\u5199\u51fa\u7f8e\u89c2\u7684\u6587\u6863\uff0c\u70b9\u51fb\u9875\u9762\u7684 Preview Changes \u53ef\u4ee5\u76f4\u63a5\u770b\u5230\u4fee\u6539\u7684\u7ed3\u679c\uff0c\u65b9\u4fbf\u6211\u4eec\u67e5\u770b\u662f\u5426\u5b58\u5728\u8bed\u6cd5\u9519\u8bef\u3002\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c \u672c\u6587\u6863\u8fd8\u652f\u6301markdown\u62d3\u5c55\u529f\u80fd\uff0c\u53ef\u4ee5\u4f7f\u7528\u8bf8\u5982\uff1a\u6570\u5b66\u516c\u5f0f\u3001\u8bed\u6cd5\u9ad8\u4eae\uff0c\u9ad8\u4eae\u6807\u6ce8\u7b49\u7b49\u539f\u751fmarkdown\u4e0d\u652f\u6301\u7684\u529f\u80fd \uff0c\u6709\u5173\u8fd9\u4e00\u90e8\u5206\u7684\u8be6\u7ec6\u5185\u5bb9\u8bf7\u53c2\u8003 Element \u3002 \u5f53\u6211\u4eec\u4fee\u6539\u5b8c\u6210\u540e\uff0c\u9700\u8981\u8fdb\u884c\u63d0\u4ea4\u4fee\u6539\u3002\u6eda\u52a8\u9875\u9762\u81f3\u5e95\u90e8\uff0c\u53ef\u4ee5\u770b\u5230 Propose file change \uff0c\u6839\u636e\u4f60\u7684\u4fee\u6539\u5185\u5bb9\u586b\u5199\u5bf9\u5e94\u7684\u63cf\u8ff0\uff0c\u5982\u4e0b\u56fe\u6240\u793a\u3002 \u968f\u540e\u70b9\u51fb\u63d0\u4ea4 Propose file change \uff0c\u6211\u4eec\u5c06\u4f1a\u8fdb\u5165\u5230\u6700\u7ec8\u7684\u63d0\u4ea4\u9875\u9762\u3002 \u5728\u9875\u9762\u4e0b\u65b9\u67e5\u770b\u6211\u4eec\u7684\u4fee\u6539\u65e0\u8bef\u540e\uff0c\u70b9\u51fb Create pull request \uff0c\u5c06\u4f1a\u628a\u6211\u4eec\u7684\u4fee\u6539\u5185\u5bb9\u6c47\u62a5\u81f3\u6587\u6863\u7f16\u8f91\u6240\u5728\u7684\u4ed3\u5e93\u4e2d\u3002\u7f16\u8f91\u90e8\u4f1a\u8fdb\u884c\u5185\u5bb9\u7684\u5ba1\u6838\uff0c\u4e00\u65e6\u5ba1\u6838\u901a\u8fc7\u4f60\u5f88\u5feb\u5c31\u4f1a\u5728\u7f51\u9875\u4e0a\u770b\u5230\u4f60\u7684\u8d21\u732e\u4e86\uff01\u4e3a\u4e86\u8ba9\u6211\u4eec\u7f16\u5199\u7684\u6587\u6863\u66f4\u52a0\u7edf\u4e00\uff0c \u6211\u4eec\u8fd8\u8bbe\u5b9a\u4e86\u4e00\u4e9b\u6587\u6863\u7684\u7f16\u5199\u8303\u5f0f\uff0c\u5e2e\u52a9\u6211\u4eec\u5199\u51fa\u66f4\u52a0\u7edf\u4e00\u7684\u6587\u6863\uff0c\u53ef\u4ee5\u8fdb\u5165 Writing Paradigm \u8fdb\u884c\u67e5\u770b \u3002","title":"\u64cd\u4f5c\u6d41\u7a0b"},{"location":"helper/#_5","text":"\u76ee\u524d\u5185\u5bb9\u4ed3\u5e93\u5b89\u6392\u5728 NLP-DL-Tricks \u4e2d\uff0c\u5f53\u5176\u4ed6\u7528\u6237\u53d1\u8d77pull request\u65f6\uff0c\u5c06\u4f1a\u6709\u4ed3\u5e93\u62e5\u6709\u8005\u8fdb\u884c\u6574\u5408\u5230edit\u5206\u652f\u3002\u5f85\u51c6\u5907\u8fdb\u884c\u66f4\u65b0\u540e\uff0c\u4ed3\u5e93\u5f00\u53d1\u8005\u4f1a\u5bf9 edit\u4e0a\u7684\u4ee3\u7801\u6574\u5408\u5230master\u5206\u652f\u4e2d\uff0c\u518d\u8fdb\u884c\u7f51\u9875\u7684\u751f\u6210\u4e0e\u66f4\u65b0\u3002 \u6574\u4e2a\u6d41\u7a0b\u7684\u793a\u610f\u56fe\u5982\u4e0b\uff1a","title":"\u9879\u76ee\u662f\u5982\u4f55\u8fd0\u4f5c\u7684\uff1f"},{"location":"helper/Writingparadigm/","text":"\u6587\u6863\u7f16\u5199\u6a21\u677f \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 ## Network architecture ### Seq2Seq Some tricks to train RNN and seq2seq models: * Embedding size: 1024 or 512. Lower dimensionality like 256 can also lead to good performances. Higher does not necessarily lead to better performances. * For the decoder: LSTM > GRU > Vanilla-RNN * 2-4 layers seems generally enough. Deeper models with residual connections seems more difficult to converge (high variance). More tricks needs to be discovered. * ResD (dense residual connections) > Res (only connected to previous layer) > no residual connections * For encoder: Bidirectional > Unidirectional (reversed input) > Unidirectional * Attention (additive) > Attention (multiplicative) > No attention. Authors suggest that attention act more as a skip connection mechanism than as a memory for the decoder. !!! info \"Ref\" [Massive Exploration of Neural Machine Translation Architectures](https://arxiv.org/abs/1703.03906), Denny Britz, Anna Goldie et al. For seq2seq, reverse the order of the input sequence (\\['I', 'am', 'hungry'\\] becomes \\['hungry', 'am', 'I'\\]). Keep the target sequence intact. !!! question \"Why\" From the authors: \"*This way, [...] that makes it easy for SGD to \u201cestablish communication\u201d between the input and the output. We found this simple data transformation to greatly improve the performance of the LSTM.*\" !!! info \"Ref\" [Sequence to Sequence Learning with Neural Networks](https://arxiv.org/abs/1409.3215), Ilya Sutskever et al. \u6548\u679c\uff1a Network architecture \u00b6 Seq2Seq \u00b6 Some tricks to train RNN and seq2seq models: Embedding size: 1024 or 512. Lower dimensionality like 256 can also lead to good performances. Higher does not necessarily lead to better performances. For the decoder: LSTM > GRU > Vanilla-RNN 2-4 layers seems generally enough. Deeper models with residual connections seems more difficult to converge (high variance). More tricks needs to be discovered. ResD (dense residual connections) > Res (only connected to previous layer) > no residual connections For encoder: Bidirectional > Unidirectional (reversed input) > Unidirectional Attention (additive) > Attention (multiplicative) > No attention. Authors suggest that attention act more as a skip connection mechanism than as a memory for the decoder. Ref Massive Exploration of Neural Machine Translation Architectures , Denny Britz, Anna Goldie et al. For seq2seq, reverse the order of the input sequence (['I', 'am', 'hungry'] becomes ['hungry', 'am', 'I']). Keep the target sequence intact. Why From the authors: \" This way, [...] that makes it easy for SGD to \u201cestablish communication\u201d between the input and the output. We found this simple data transformation to greatly improve the performance of the LSTM. \" Ref Sequence to Sequence Learning with Neural Networks , Ilya Sutskever et al.","title":"Writing Paradigm"},{"location":"helper/Writingparadigm/#_1","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 ## Network architecture ### Seq2Seq Some tricks to train RNN and seq2seq models: * Embedding size: 1024 or 512. Lower dimensionality like 256 can also lead to good performances. Higher does not necessarily lead to better performances. * For the decoder: LSTM > GRU > Vanilla-RNN * 2-4 layers seems generally enough. Deeper models with residual connections seems more difficult to converge (high variance). More tricks needs to be discovered. * ResD (dense residual connections) > Res (only connected to previous layer) > no residual connections * For encoder: Bidirectional > Unidirectional (reversed input) > Unidirectional * Attention (additive) > Attention (multiplicative) > No attention. Authors suggest that attention act more as a skip connection mechanism than as a memory for the decoder. !!! info \"Ref\" [Massive Exploration of Neural Machine Translation Architectures](https://arxiv.org/abs/1703.03906), Denny Britz, Anna Goldie et al. For seq2seq, reverse the order of the input sequence (\\['I', 'am', 'hungry'\\] becomes \\['hungry', 'am', 'I'\\]). Keep the target sequence intact. !!! question \"Why\" From the authors: \"*This way, [...] that makes it easy for SGD to \u201cestablish communication\u201d between the input and the output. We found this simple data transformation to greatly improve the performance of the LSTM.*\" !!! info \"Ref\" [Sequence to Sequence Learning with Neural Networks](https://arxiv.org/abs/1409.3215), Ilya Sutskever et al. \u6548\u679c\uff1a","title":"\u6587\u6863\u7f16\u5199\u6a21\u677f"},{"location":"helper/Writingparadigm/#network-architecture","text":"","title":"Network architecture"},{"location":"helper/Writingparadigm/#seq2seq","text":"Some tricks to train RNN and seq2seq models: Embedding size: 1024 or 512. Lower dimensionality like 256 can also lead to good performances. Higher does not necessarily lead to better performances. For the decoder: LSTM > GRU > Vanilla-RNN 2-4 layers seems generally enough. Deeper models with residual connections seems more difficult to converge (high variance). More tricks needs to be discovered. ResD (dense residual connections) > Res (only connected to previous layer) > no residual connections For encoder: Bidirectional > Unidirectional (reversed input) > Unidirectional Attention (additive) > Attention (multiplicative) > No attention. Authors suggest that attention act more as a skip connection mechanism than as a memory for the decoder. Ref Massive Exploration of Neural Machine Translation Architectures , Denny Britz, Anna Goldie et al. For seq2seq, reverse the order of the input sequence (['I', 'am', 'hungry'] becomes ['hungry', 'am', 'I']). Keep the target sequence intact. Why From the authors: \" This way, [...] that makes it easy for SGD to \u201cestablish communication\u201d between the input and the output. We found this simple data transformation to greatly improve the performance of the LSTM. \" Ref Sequence to Sequence Learning with Neural Networks , Ilya Sutskever et al.","title":"Seq2Seq"},{"location":"helper/element/","text":"\u53ef\u4ee5\u652f\u6301\u7684\u5143\u7d20 \u00b6 \u672c\u6587\u6863\u652f\u6301markdown\u62d3\u5c55\u529f\u80fd\uff0c\u53ef\u4ee5\u4f7f\u7528\u8bf8\u5982\uff1a\u6570\u5b66\u516c\u5f0f\u3001\u8bed\u6cd5\u9ad8\u4eae\uff0c\u9ad8\u4eae\u6807\u6ce8\u7b49\u7b49\u539f\u751fmarkdown\u4e0d\u652f\u6301\u7684\u529f\u80fd\u3002 \u4ee3\u7801 \u00b6 \u63d2\u5165\u4ee3\u7801 \u00b6 1 2 3 4 ``` python import numpy as np import torch.nn as nn ``` \u6548\u679c\uff1a 1 2 import numpy as np import torch.nn as nn \u4ee3\u7801\u7279\u5b9a\u884c\u9ad8\u4eae \u00b6 1 2 3 4 5 6 7 8 ``` python hl_lines=\"3 4\" \"\"\" Bubble sort \"\"\" def bubble_sort(items): for i in range(len(items)): for j in range(len(items) - 1 - i): if items[j] > items[j + 1]: items[j], items[j + 1] = items[j + 1], items[j] ``` \u6548\u679c\uff1a 1 2 3 4 5 6 \"\"\" Bubble sort \"\"\" def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ] \u66f4\u591a\u6709\u5173\u4ee3\u7801\u7684\u4f7f\u7528\u7ec6\u8282\u53ef\u4ee5\u53c2\u8003 CodeHilite \u8868\u683c \u00b6 1 2 3 4 5 dog | bird | cat ----|------|---- foo | foo | foo bar | bar | bar baz | baz | baz \u6548\u679c\uff1a dog bird cat foo foo foo bar bar bar baz baz baz \u6570\u5b66\u516c\u5f0f \u00b6 \u6587\u6863\u652f\u6301\u4f7f\u7528Latex\u8fdb\u884c\u6570\u5b66\u516c\u5f0f\u7684\u7f16\u8f91 1 2 3 $$ \\frac{n!}{k!(n-k)!} = \\binom{n}{k} $$ \u6548\u679c\uff1a \\frac{n!}{k!(n-k)!} = \\binom{n}{k} \\frac{n!}{k!(n-k)!} = \\binom{n}{k} Admonition \u00b6 1 2 !!! info \"Ref\" [Massive Exploration of Neural Machine Translation Architectures](https://arxiv.org/abs/1703.03906), Denny Britz, Anna Goldie et al. \u6548\u679c\uff1a Ref Massive Exploration of Neural Machine Translation Architectures , Denny Britz, Anna Goldie et al. 1 2 !!! question \"Why\" From the authors: \"*This way, [...] that makes it easy for SGD to \u201cestablish communication\u201d between the input and the output. We found this simple data transformation to greatly improve the performance of the LSTM.*\" \u6548\u679c\uff1a Why From the authors: \" This way, [...] that makes it easy for SGD to \u201cestablish communication\u201d between the input and the output. We found this simple data transformation to greatly improve the performance of the LSTM. \" \u66f4\u591a\u6709\u5173Admonition\u7684\u4f7f\u7528\u7ec6\u8282\u53ef\u4ee5\u53c2\u8003 Admonition","title":"Element"},{"location":"helper/element/#_1","text":"\u672c\u6587\u6863\u652f\u6301markdown\u62d3\u5c55\u529f\u80fd\uff0c\u53ef\u4ee5\u4f7f\u7528\u8bf8\u5982\uff1a\u6570\u5b66\u516c\u5f0f\u3001\u8bed\u6cd5\u9ad8\u4eae\uff0c\u9ad8\u4eae\u6807\u6ce8\u7b49\u7b49\u539f\u751fmarkdown\u4e0d\u652f\u6301\u7684\u529f\u80fd\u3002","title":"\u53ef\u4ee5\u652f\u6301\u7684\u5143\u7d20"},{"location":"helper/element/#_2","text":"","title":"\u4ee3\u7801"},{"location":"helper/element/#_3","text":"1 2 3 4 ``` python import numpy as np import torch.nn as nn ``` \u6548\u679c\uff1a 1 2 import numpy as np import torch.nn as nn","title":"\u63d2\u5165\u4ee3\u7801"},{"location":"helper/element/#_4","text":"1 2 3 4 5 6 7 8 ``` python hl_lines=\"3 4\" \"\"\" Bubble sort \"\"\" def bubble_sort(items): for i in range(len(items)): for j in range(len(items) - 1 - i): if items[j] > items[j + 1]: items[j], items[j + 1] = items[j + 1], items[j] ``` \u6548\u679c\uff1a 1 2 3 4 5 6 \"\"\" Bubble sort \"\"\" def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ] \u66f4\u591a\u6709\u5173\u4ee3\u7801\u7684\u4f7f\u7528\u7ec6\u8282\u53ef\u4ee5\u53c2\u8003 CodeHilite","title":"\u4ee3\u7801\u7279\u5b9a\u884c\u9ad8\u4eae"},{"location":"helper/element/#_5","text":"1 2 3 4 5 dog | bird | cat ----|------|---- foo | foo | foo bar | bar | bar baz | baz | baz \u6548\u679c\uff1a dog bird cat foo foo foo bar bar bar baz baz baz","title":"\u8868\u683c"},{"location":"helper/element/#_6","text":"\u6587\u6863\u652f\u6301\u4f7f\u7528Latex\u8fdb\u884c\u6570\u5b66\u516c\u5f0f\u7684\u7f16\u8f91 1 2 3 $$ \\frac{n!}{k!(n-k)!} = \\binom{n}{k} $$ \u6548\u679c\uff1a \\frac{n!}{k!(n-k)!} = \\binom{n}{k} \\frac{n!}{k!(n-k)!} = \\binom{n}{k}","title":"\u6570\u5b66\u516c\u5f0f"},{"location":"helper/element/#admonition","text":"1 2 !!! info \"Ref\" [Massive Exploration of Neural Machine Translation Architectures](https://arxiv.org/abs/1703.03906), Denny Britz, Anna Goldie et al. \u6548\u679c\uff1a Ref Massive Exploration of Neural Machine Translation Architectures , Denny Britz, Anna Goldie et al. 1 2 !!! question \"Why\" From the authors: \"*This way, [...] that makes it easy for SGD to \u201cestablish communication\u201d between the input and the output. We found this simple data transformation to greatly improve the performance of the LSTM.*\" \u6548\u679c\uff1a Why From the authors: \" This way, [...] that makes it easy for SGD to \u201cestablish communication\u201d between the input and the output. We found this simple data transformation to greatly improve the performance of the LSTM. \" \u66f4\u591a\u6709\u5173Admonition\u7684\u4f7f\u7528\u7ec6\u8282\u53ef\u4ee5\u53c2\u8003 Admonition","title":"Admonition"}]}